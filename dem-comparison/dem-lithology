#!/usr/bin/env python

import rasterio
from pathlib import Path
from geopandas import GeoDataFrame
from database import db
from image_files import DEM
from rasterio.features import geometry_mask
from matplotlib.pyplot import subplots, style
import numpy as N
from colour import Color

style.use('plot-style.mplstyle')

# Get polygon geometries

file = Path(__file__)
build_dir = file.with_name('build')

with (file.parent/'feature-geometry.sql').open('r') as f:
    sql = f.read()

df = GeoDataFrame.from_postgis(sql, db)
# Build feature raster

with rasterio.open(str(DEM),'r') as img:
    px_size = img.transform.a

    imdata = img.read(1,masked=True)
    print("Image has been read")

    def get_values(geom):
        mask = geometry_mask(geom,img.shape,
                    img.transform,invert=True)
        return imdata[mask==True].compressed()

    df['array'] = df.geom.map(get_values)
    df['mean'] = df.array.map(lambda d: N.mean(d))
    df['median'] = df.array.map(lambda d: N.median(d))

df.sort(['is_mat','mean'],ascending=[0,1], inplace=True)

for i,d in df.iterrows():
    n = len(d.array)
    t = d.unit_id.strip()

    area = n*px_size**2/1e6
    μ = d['mean']
    m = d['median']
    σ = d.array.std()
    print(f"{t}")
    print(f"  {n} pixels")
    print(f"  {area:.3f} km²")
    print(f"  μ {μ:.3f} m")
    print(f"  σ {σ:.3f} m")
    print(f"med {m:.3f} m")
    print("")

fig, ax = subplots(figsize=(10,6))

# Choose a subset of the array for size constraints
arrays = df.array.map(lambda d: N.random.choice(d, len(d)//1000))

pos = N.arange(len(arrays))
parts = ax.violinplot(arrays,pos,
            points=300, widths=0.95, showmeans=True,
            showextrema=False, showmedians=False, bw_method=0.25)

colors =  df.color.str.strip()
for pc, color in zip(parts['bodies'], colors):
    pc.set_color(color)

parts['cmeans'].set_color(colors)

ax.set_xticks(pos)
ax.set_xticklabels(df.name.str.strip())

ax.set_ylabel("Elevation (m above datum) ")
ax.set_xlabel("Facies")
ax.set_ylim(-1,1)

fn = str(build_dir/'dem-lithology.pdf')
fig.savefig(fn, bbox_inches='tight')

